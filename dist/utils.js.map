{"version":3,"sources":["../src/utils.js"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import { toTree, toPaths as falcorToPaths } from 'falcor-path-utils';\n\nexport function values(obj) {\n  if (!obj) {\n    return [];\n  }\n  return Object.\n    keys(obj).\n    filter(key => key !== '$__path').\n    map(key => obj[key]);\n}\n\nexport function range(from, to, obj) {\n  if (!obj) {\n    return new Error('obj cannot be falsy');\n  }\n  if (to < from) {\n    return new Error('to cannot be greater than from');\n  }\n  const result = {};\n  for (let i = from; i <= to; i++) {\n    result[i] = obj;\n  }\n  return result;\n}\n\nexport function fragment(queries) {\n  return toTree(falcorToPaths(queries));\n}\n\nfunction depthOf(obj) {\n  let level = 1;\n  for (const key in obj) {\n    if (!obj.hasOwnProperty(key)) continue;\n    if (obj[key] && obj[key].constructor === Object) {\n      const depth = depthOf(obj[key]) + 1;\n      level = Math.max(depth, level);\n    }\n  }\n  return level;\n}\n\nfunction* iterateTree(tree) {\n  for (const key in tree) {\n    if (tree.hasOwnProperty(key)) {\n      const value = { [key]: tree[key] };\n      yield { value, length: depthOf(value) };\n    }\n  }\n}\n\nexport function toLengthTree(tree) {\n  const result = {};\n  for (const { value, length } of iterateTree(tree)) {\n    if (!result[length]) {\n      result[length] = {};\n    }\n    result[length] = {\n      ...result[length],\n      ...value\n    };\n  }\n  return result;\n}\n\nexport function toPaths(tree) {\n  return falcorToPaths(toLengthTree(tree));\n}\n\nexport function prependToPaths(toPrepend, paths) {\n  if (!toPrepend && !paths) {\n    return new Error('arguments cannot be falsy');\n  }\n  if (toPrepend.constructor !== Array) {\n    return new Error('argument must be an array which will be prepented to every path');\n  }\n  if (paths.constructor !== Array) {\n    return new Error('paths must be an array');\n  }\n  const result = [];\n  for (const path of paths) {\n    result.push(toPrepend.concat(path));\n  }\n  return result;\n}\n"]}